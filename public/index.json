[{"authors":null,"categories":["latent variables"],"content":"Slides for my presentation at the Nordic-Baltic Biometrics Conference are available here.\n","date":1623024000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623024000,"objectID":"c683cdcb993dd8c52bd14fb81481838a","permalink":"https://osorensen.rbind.io/post/2021-06-07-slides-from-nordic-baltic-biometrics-conference-2021/","publishdate":"2021-06-07T00:00:00Z","relpermalink":"/post/2021-06-07-slides-from-nordic-baltic-biometrics-conference-2021/","section":"post","summary":"Slides for my presentation at the Nordic-Baltic Biometrics Conference are available here.","tags":["GALAMM","GAMM","GLLAMM"],"title":"Slides from Nordic-Baltic Biometrics Conference 2021","type":"post"},{"authors":null,"categories":["R"],"content":"\rThe organizers of the European R User Meeting 2020 have put together a really impressive event, with lots of opportunities for interaction and stimulating discussions while being fully online. I have particularly enjoyed the good mix of academic presentations focusing on methodology and more business and industry related presentations focusing on use of R in production.\nToday I presented the BayesMallows package in a five-minute lightning talk, and the slides (with links) are available here. Recordings of all the talks will be posted in the ERUM 2020 YouTube channel.\n","date":1592524800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592524800,"objectID":"0a9e977e9ebf04adbdb03a4cf338272e","permalink":"https://osorensen.rbind.io/post/bayesmallows-presentation-at-the-european-r-user-meeting-2020/","publishdate":"2020-06-19T00:00:00Z","relpermalink":"/post/bayesmallows-presentation-at-the-european-r-user-meeting-2020/","section":"post","summary":"The organizers of the European R User Meeting 2020 have put together a really impressive event, with lots of opportunities for interaction and stimulating discussions while being fully online. I have particularly enjoyed the good mix of academic presentations focusing on methodology and more business and industry related presentations focusing on use of R in production.\nToday I presented the BayesMallows package in a five-minute lightning talk, and the slides (with links) are available here.","tags":["BayesMallows"],"title":"BayesMallows Presentation at the European R User Meeting 2020","type":"post"},{"authors":null,"categories":["R"],"content":"\rThe European R User Meeting 2020 has so far been a really great event, with interesting talks and online presentations working smoothly. I presented the metagam package this morning, and the slides are available here.\n","date":1592352000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592352000,"objectID":"c5a07ebeb48c640a47833f6db76b535b","permalink":"https://osorensen.rbind.io/post/presentation-of-metagam-at-erum2020/","publishdate":"2020-06-17T00:00:00Z","relpermalink":"/post/presentation-of-metagam-at-erum2020/","section":"post","summary":"The European R User Meeting 2020 has so far been a really great event, with interesting talks and online presentations working smoothly. I presented the metagam package this morning, and the slides are available here.","tags":["metagam"],"title":"Presentation of metagam at ERUM2020","type":"post"},{"authors":null,"categories":["R"],"content":"\rTonight I gave a presentation of Rcpp at the Oslo UseR! Group. The slides are here.\nIt was a nice opportunity to meet some of the many R users in town. Thanks to Deemah for organizing!\n","date":1549411200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549411200,"objectID":"8c7395e041ab611064058ca53e3fd7df","permalink":"https://osorensen.rbind.io/post/slides-from-talk-at-oslo-user-group/","publishdate":"2019-02-06T00:00:00Z","relpermalink":"/post/slides-from-talk-at-oslo-user-group/","section":"post","summary":"Tonight I gave a presentation of Rcpp at the Oslo UseR! Group. The slides are here.\nIt was a nice opportunity to meet some of the many R users in town. Thanks to Deemah for organizing!","tags":["Rcpp"],"title":"Slides from talk at Oslo UseR! Group","type":"post"},{"authors":null,"categories":["R"],"content":"\rIn preparing for my upcoming Rcpp talk at the Oslo useR! Group, I started wondering how much of R is actually written in C or Fortran. I have of course been trained to think that vectorization is great, because then you let C or Fortran do the job, but how much of R is actually written in these languages? Some searching led me to this blog, which analyzes R-2.13.1. However, that post is from 2011, and at the time of writing R has reached version 3-5.2. In addition, the post uses Bash scripts rather than R itself. In this post, I hence reexamine the question, using R all the way, which will be a good exercise. Note that this analysis covers the functions in base R, i.e., stuff like apply(), data.frame(), plot(), and (I guess, but really have no idea) the code that actually makes R run.\nI start by defining the R version I want, and the path to which the source file should be saved.\nr_version \u0026lt;- \u0026quot;3.5.2\u0026quot;\rtarfile \u0026lt;- paste0(\u0026quot;./R-\u0026quot;, r_version, \u0026quot;.tar.gz\u0026quot;)\rThen I download the source:\ndownload.file(url = paste0(\u0026quot;https://cran.r-project.org/src/base/R-3/R-\u0026quot;, r_version, \u0026quot;.tar.gz\u0026quot;),\rdestfile = tarfile)\rHaving downloaded it, I unpack the tar file and remove it. We now have a R-3.5.2 directory.\nuntar(tarfile)\rfile.remove(tarfile)\r## [1] TRUE\rI also define the path to the source code, which is in the src subdirectory.\n(src_path \u0026lt;- paste0(\u0026quot;./R-\u0026quot;, r_version, \u0026quot;/src/\u0026quot;))\r## [1] \u0026quot;./R-3.5.2/src/\u0026quot;\rIn order to see which files are in src, I list all files that end with a . followed by alphanumeric characters.\nfiles \u0026lt;- list.files(src_path, pattern = \u0026quot;\\\\.[[:alnum:]]+$\u0026quot;, recursive = TRUE)\rNext, I take a first look at all the file endings under src. As we can see, the main languages are C (.c), Fortran (.f) and R (.R).\nlibrary(stringr)\r(file_count \u0026lt;- table(str_extract(files, \u0026quot;\\\\.[:alnum:]+$\u0026quot;)))\r## ## .3 .afm .bib .bmp .c .charset .csv ## 1 91 3 1 497 1 2 ## .def .dif .dist .doc .enc .f .flate ## 5 1 1 1 18 38 1 ## .gz .h .hide .html .ico .in .isl ## 15 170 2 2 1 82 3 ## .iss .m .manifest .mo .modreg .notes .nw ## 7 1 8 279 1 1 1 ## .packages .patch .pdf .png .po .portsrc .pot ## 1 1 18 3 256 1 25 ## .R .rc .Rd .rda .Rnw .RR .Rterm ## 772 9 1422 9 21 5 1 ## .rtest .rtf .rules .S .save .site .svg ## 1 1 1 1 10 1 1 ## .tab .tcl .tgz .ts .txt .unix .win ## 6 11 15 1 9 1 47 ## .windows .y .zi .zip ## 1 3 1 1\rI now count the number of lines in each C, Fortran, and R file. I use the map function from purrr, which is part of the tidyverse. The pattern \"\\\\.[c|f|R]$\" means everything that ends with a period followed by c, f or R.\nlibrary(tidyverse)\rlibrary(R.utils) # For countLines\rstats \u0026lt;- str_subset(files, \u0026quot;\\\\.[c|f|R]$\u0026quot;) %\u0026gt;% split(str_extract(., \u0026quot;\\\\.[c|f|R]$\u0026quot;)) %\u0026gt;% map_dfr(function(x){\rtibble(\rLines = sum(map_int(x, ~ countLines(paste0(src_path, .x)))),\rFiles = length(x)\r)\r}, .id = \u0026quot;Language\u0026quot;) %\u0026gt;% mutate(\rLanguage = recode(Language, `.c` = \u0026quot;C\u0026quot;, `.f` = \u0026quot;Fortran\u0026quot;, `.R` = \u0026quot;R\u0026quot;),\rLinesPct = paste(100 * round(Lines / sum(Lines), 2), \u0026quot;%\u0026quot;),\rFilesPct = paste(100 * round(Files / sum(Files), 2), \u0026quot;%\u0026quot;)\r)\rWe now have the required numbers, and can make a plot.\nggplot(stats, aes(x = Language, y = Lines, label = LinesPct)) +\rgeom_col() +\rgeom_text(position = position_stack(vjust = 0.5), color = \u0026quot;white\u0026quot;) +\rggtitle(\u0026quot;Number of lines per language in base R\u0026quot;)\rSo, the conclusion is that most of base R is written in C or Fortran, at least in terms of lines of code. This is of course good, because it lets us write fast code, e.g., through vectorization.\nThe number of files per language was shown above, but we can plot this as well.\nggplot(stats, aes(x = Language, y = Files, label = FilesPct)) +\rgeom_col() +\rgeom_text(position = position_stack(vjust = 0.5), color = \u0026quot;white\u0026quot;) +\rggtitle(\u0026quot;Number of lines per language in base R\u0026quot;)\rIt seems like there are some really long files with Fortran code in there!\nFinally I delete the R source code which was downloaded.\nunlink(paste0(\u0026quot;./R-\u0026quot;, r_version), recursive = TRUE)\rAn interesting follow-up would be to study how this has changed over time, and also for CRAN packages.\n","date":1547337600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1547337600,"objectID":"f115ffabb68dde698716ecc61ca811a3","permalink":"https://osorensen.rbind.io/post/in-which-language-is-r-written/","publishdate":"2019-01-13T00:00:00Z","relpermalink":"/post/in-which-language-is-r-written/","section":"post","summary":"In preparing for my upcoming Rcpp talk at the Oslo useR! Group, I started wondering how much of R is actually written in C or Fortran. I have of course been trained to think that vectorization is great, because then you let C or Fortran do the job, but how much of R is actually written in these languages? Some searching led me to this blog, which analyzes R-2.13.1. However, that post is from 2011, and at the time of writing R has reached version 3-5.","tags":[],"title":"In Which Language is R Written?","type":"post"}]